// Generated by BUCKLESCRIPT VERSION 1.9.0, PLEASE EDIT WITH CARE
'use strict';

var Sys         = require("bs-platform/lib/js/sys.js");
var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var Format      = require("bs-platform/lib/js/format.js");
var Printf      = require("bs-platform/lib/js/printf.js");
var PL_data     = require("./pL_data.js");
var Prog_exec   = require("./prog_exec.js");
var Caml_array  = require("bs-platform/lib/js/caml_array.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var Parse_flags = require("./parse_flags.js");

var progIndex = Parse_flags.parseFlags(/* () */0);

if ((Sys.argv.length - progIndex | 0) !== 2) {
  Format.printf(/* Format */[
        /* String_literal */Block.__(11, [
            "Usage: ./main.native [flags] <file> <binary input>\n",
            /* End_of_format */0
          ]),
        "Usage: ./main.native [flags] <file> <binary input>\n"
      ]);
  Pervasives.exit(0);
} else {
  var output = Prog_exec.executeFile(Caml_array.caml_array_get(Sys.argv, progIndex), Caml_array.caml_array_get(Sys.argv, progIndex + 1 | 0));
  if (!PL_data.nand[/* dryRun */4]) {
    Curry._1(Printf.printf(/* Format */[
              /* String_literal */Block.__(11, [
                  "Output is ",
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* Char_literal */Block.__(12, [
                          /* "\n" */10,
                          /* End_of_format */0
                        ])
                    ])
                ]),
              "Output is %s\n"
            ]), output);
  }
  
}

/* progIndex Not a pure module */
