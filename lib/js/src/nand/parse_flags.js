// Generated by BUCKLESCRIPT VERSION 1.9.0, PLEASE EDIT WITH CARE
'use strict';

var Sys                     = require("bs-platform/lib/js/sys.js");
var List                    = require("bs-platform/lib/js/list.js");
var Block                   = require("bs-platform/lib/js/block.js");
var Curry                   = require("bs-platform/lib/js/curry.js");
var Flags                   = require("./flags.js");
var Printf                  = require("bs-platform/lib/js/printf.js");
var Caml_array              = require("bs-platform/lib/js/caml_array.js");
var Caml_string             = require("bs-platform/lib/js/caml_string.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function processFlag(str) {
  try {
    return Curry._1(List.assoc(str, Flags.flags), /* () */0);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return Curry._1(Printf.printf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "Warning: flag ",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  " not found\n",
                                  /* End_of_format */0
                                ])
                            ])
                        ]),
                      "Warning: flag %s not found\n"
                    ]), str);
    } else {
      throw exn;
    }
  }
}

function isFlag(str) {
  return +(Caml_string.get(str, 0) === /* "-" */45);
}

var curArg = [0];

function checkIsFlag() {
  curArg[0] = curArg[0] + 1 | 0;
  return isFlag(Caml_array.caml_array_get(Sys.argv, curArg[0]));
}

function parseFlags() {
  while(checkIsFlag(/* () */0)) {
    processFlag(Caml_array.caml_array_get(Sys.argv, curArg[0]));
  };
  return curArg[0];
}

exports.processFlag = processFlag;
exports.isFlag      = isFlag;
exports.curArg      = curArg;
exports.checkIsFlag = checkIsFlag;
exports.parseFlags  = parseFlags;
/* Flags Not a pure module */
